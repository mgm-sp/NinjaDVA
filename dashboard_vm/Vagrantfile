# -*- mode: ruby -*-
# vi: set ft=ruby :

# ninjaDVA Dashboard
#

Vagrant.configure("2") do |config|
	config.vm.define "dashboard"

	# deactivate the standard shared folder
	config.vm.synced_folder ".", "/vagrant", disabled:true

	# name and version of vm image
	config.vm.box = "bento/debian-9"

	#set hostname for vm
	config.vm.hostname = "dashboard"
	ENV['LC_ALL']="en_US.UTF-8"

	config.vm.provider "virtualbox" do |vb|
		vb.memory = "2048"
	end

	# add a interface to the vm that is in the same internal networke like the gateway
	#config.vm.network "private_network", type: "dhcp", virtualbox__intnet: "broken"
	config.vm.network "private_network", auto_config: false, virtualbox__intnet: "ninjadva"

	# define commands that will be executed on the vm after the vm is
	# up and running. This is the right place for software installation.
	config.vm.provision "shell", inline: <<-END
			apt-get -y update
			apt-get -y remove isc-dhcp-client
			apt-get -y install apache2 ruby ruby-dev ruby-sqlite3 sqlite3 dhcpcd5 libfontconfig1 libffi-dev inotify-tools psmisc
			killall dhclient
			gem install argon2
			cd /tmp
			wget --quiet https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2
			bzip2 -dc phantomjs-2.1.1-linux-x86_64.tar.bz2 | tar -xf -
			rm -rf /usr/share/phantom*
			mv phantomjs-2.1.1-linux-x86_64 /usr/share/
			ln -sf /usr/share/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin/phantomjs
	END

	########### copy files to vm

	# copy network interfaces definition and hosts file to vm
	config.vm.provision "file", source: "./interfaces", destination: "/tmp/vagrant_tmp/interfaces"
	config.vm.provision "file", source: "./hosts", destination: "/tmp/vagrant_tmp/hosts"

	# copy apache vm definition and server code to vm
	config.vm.provision "file", source: "./vmhost.conf", destination: "/tmp/vagrant_tmp/vmhost.conf"
	config.vm.provision "file", source: "./www", destination: "/tmp/vagrant_tmp/www"

	# move files to their destination
	config.vm.provision "shell", inline: <<-END
			cd /tmp/vagrant_tmp/
			install -o root -g root interfaces /etc/network/interfaces
			install -o root -g root hosts /etc/hosts
			install -o root -g root	vmhost.conf /etc/apache2/sites-available/vmhost.conf
			cp -R www/* /var/www/
			find /var/www -iname "*.cgi"|xargs chmod a+x
			chown -R root:root /var/www/
			rm -rf *
	END

	# shared folders
	Dir.mkdir("config") unless Dir.exists?("config")
	config.vm.synced_folder "./config", "/var/www/config", mount_options: ["dmode=777,fmode=666"]
	config.vm.synced_folder "./challenge-descriptions", "/var/www/challenge-descriptions"
	config.vm.synced_folder "./dashboard-widgets", "/var/www/dashboard-widgets/"
	config.vm.synced_folder "./dashboard-admin", "/var/www/dashboard-admin/"


	# reload the network configuration
	config.vm.provision "shell", inline: <<-END
			ifdown eth1
			ifup eth1
			ifup eth1:0
			ifup eth1:1
			echo -e "\n# avoid nic1 providing a dns server\ninterface eth0\nnooption 6" >> /etc/dhcpcd.conf
	END


	# define commands that will be executed after the code was copied to
	# the vm. This is the place where your server configuration can take place
	config.vm.provision "shell", inline: <<-END
			chown www-data:www-data /var/www/clonecloud
			service apache2 stop
			a2enconf serve-cgi-bin
			a2dismod mpm_event
			a2enmod mpm_prefork
			a2enmod cgi
			a2enmod headers
			a2enmod rewrite
			a2enmod auth_digest
			a2ensite vmhost
			a2dissite 000-default
			service apache2 start
	END
end
